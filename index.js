import dotenv from 'dotenv';
import { Telegraf, Markup, session } from 'telegraf';
import express from 'express';
import fs from 'fs';
import path from 'path';
import axios from 'axios';
import { fileURLToPath } from 'url';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import OpenAI from 'openai';
import ffmpeg from 'fluent-ffmpeg';

// Set up paths
const filename = fileURLToPath(import.meta.url);
const dirname = path.dirname(filename);

// Configure environment variables
dotenv.config();

// Constants
const PORT = process.env.PORT || 3000;
const TEMP_DIR = path.join(dirname, 'temp');
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const DEFAULT_CATEGORIES = ['–ø—Ä–æ–¥—É–∫—Ç–∏', '–∫–∞—Ñ–µ', '–ø–æ–∫—É–ø–∫–∏', '–∫–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏', '—Å–ø–æ—Ä—Ç', '–∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–∏', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '—Ä–æ–∑–≤–∞–≥–∏', '–∑–¥–æ—Ä–æ–≤\'—è', '—ñ–Ω—à—ñ'];
const MAX_FILE_SIZE_MB = 20; // Maximum allowed file size in MB

// Check if temp directory exists
if (!fs.existsSync(TEMP_DIR)) {
  fs.mkdirSync(TEMP_DIR, { recursive: true });
}

// Initialize OpenAI
const openai = process.env.OPENAI_API_KEY 
  ? new OpenAI({ apiKey: process.env.OPENAI_API_KEY })
  : null;

// Initialize Express App
const app = express();
app.use(express.json());

// Check for required environment variables
if (!TELEGRAM_BOT_TOKEN) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN not set!');
  process.exit(1);
}

if (!process.env.OPENAI_API_KEY) {
  console.error('‚ùå OPENAI_API_KEY not set!');
  process.exit(1);
}

// Initialize Telegram bot with session middleware
const bot = new Telegraf(TELEGRAM_BOT_TOKEN);
bot.use(session());
const noteStorage = {};

/**
 * Checks the file size
 * @param {string} filePath - Path to the file
 * @returns {number} - File size in MB
 */
const checkFileSize = (filePath) => {
  try {
    const stats = fs.statSync(filePath);
    const fileSizeInMB = stats.size / (1024 * 1024);
    console.log(`üìä File size: ${fileSizeInMB.toFixed(2)} MB`);
    return fileSizeInMB;
  } catch (err) {
    console.error(`‚ùå Error checking file size: ${err.message}`);
    return 0;
  }
};

/**
 * Analyzes text to detect expenses
 * @param {string} text - Text to analyze
 * @returns {Object} - Analysis result with amount and category
 */
const analyzeExpense = (text) => {
  try {
    if (!text || typeof text !== 'string') {
      return { error: 'Text for analysis is missing or incorrect' };
    }
    
    // Search for amount with currency
    const amountRegex = /(\d+(?:[.,]\d+)?)\s*(–≥—Ä–Ω|–≥—Ä–∏–≤–µ–Ω—å|–≥—Ä–Ω\.|‚Ç¥|uah|)/gi;
    let amountMatch = amountRegex.exec(text);
    
    let amount = 0;
    if (amountMatch) {
      // Replace comma with dot for correct parsing
      amount = parseFloat(amountMatch[1].replace(',', '.'));
    } else {
      // Try to find just numbers
      const numberMatch = /(\d+(?:[.,]\d+)?)/.exec(text);
      if (numberMatch) {
        amount = parseFloat(numberMatch[1].replace(',', '.'));
      }
    }
    
    // Determine category
    let category = '—ñ–Ω—à—ñ';
    const lowerText = text.toLowerCase();
    
    const categoryPatterns = {
      '–ø—Ä–æ–¥—É–∫—Ç–∏': /–ø—Ä–æ–¥[–∞—É]–∫—Ç|—ó–∂[–∞—ñ—É]|—Ö–ª—ñ–±|–º–æ–ª–æ–∫–æ|–æ–≤–æ—á|—Ñ—Ä—É–∫—Ç|–º–∞–≥–∞–∑–∏–Ω|—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç|–º–∞—Ä–∫–µ—Ç/i,
      '–∫–∞—Ñ–µ': /–∫–∞—Ñ[–µ—î]|—Ä–µ—Å—Ç–æ—Ä–∞–Ω|—ó–¥–∞–ª—å–Ω|–æ–±—ñ–¥|–≤–µ—á–µ—Ä[—è—é]|—Å–Ω—ñ–¥–∞–Ω[–æ–∫]|–ø—ñ—Ü[–∞—É]|—Å—É—à—ñ|—Ñ–∞—Å—Ç—Ñ—É–¥/i,
      '–∫–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏': /–∫–æ–º—É–Ω–∞–ª|—Å–≤—ñ—Ç–ª–æ|–≥–∞–∑|–≤–æ–¥[–∞–∏]|–æ–ø–∞–ª–µ–Ω|–µ–ª–µ–∫—Ç—Ä–æ|—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç|—Ç–µ–ª–µ—Ñ–æ–Ω/i,
      '—Å–ø–æ—Ä—Ç': /—Å–ø–æ—Ä—Ç|—Ç—Ä–µ–Ω—É|—Ñ—ñ—Ç–Ω–µ—Å|–∞–±–æ–Ω–µ–º–µ–Ω—Ç|–∑–∞–ª|–±–∞—Å–µ–π–Ω|–π–æ–≥–∞/i,
      '–∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–∏': /–∑–æ—à–∏—Ç|—Ä—É—á–∫|–æ–ª—ñ–≤—Ü|–ø–∞–ø—ñ—Ä|–∫–∞–Ω—Ü|–∫–Ω–∏–≥|–∫–∞–Ω—Ü–µ–ª—è—Ä/i,
      '–ø–æ–∫—É–ø–∫–∏': /–æ–¥—è–≥|–≤–∑—É—Ç—Ç|—Å–æ—Ä–æ—á|–º–∞–≥–∞–∑–∏–Ω|–∫—É–ø–∏–≤|–∫—É–ø–∏–ª|–ø—Ä–∏–¥–±–∞|—à–æ–ø—ñ–Ω–≥|—à–æ–ø–ø—ñ–Ω–≥/i,
      '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': /–∞–≤—Ç–æ–±—É—Å|–º–µ—Ç—Ä–æ|—Ç–∞–∫—Å—ñ|–ø–æ—ó–∑–¥|–∫–≤–∏—Ç–æ–∫|–ø—Ä–æ—ó–∑–¥|–±–µ–Ω–∑–∏–Ω|–ø–∞–ª–∏–≤–æ/i,
      '—Ä–æ–∑–≤–∞–≥–∏': /–∫—ñ–Ω–æ|—Ç–µ–∞—Ç—Ä|–∫–æ–Ω—Ü–µ—Ä—Ç|—Ä–æ–∑–≤–∞–≥|–≤–∏—Å—Ç–∞–≤|–ø–∞—Ä–∫|–∞—Ç—Ä–∞–∫—Ü—ñ–æ–Ω/i,
      '–∑–¥–æ—Ä–æ–≤\'—è': /–ª—ñ–∫|–∞–ø—Ç–µ–∫|–º–µ–¥–∏—Ü|–ª—ñ–∫–∞—Ä|—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥|—Ç–µ—Ä–∞–ø–µ–≤—Ç|–∑–¥–æ—Ä–æ–≤/i
    };
    
    for (const [cat, pattern] of Object.entries(categoryPatterns)) {
      if (pattern.test(lowerText)) {
        category = cat;
        break;
      }
    }
    
    return { amount, category };
  } catch (err) {
    console.error('‚ùå Error analyzing expenses:', err);
    return { error: 'Error analyzing expenses' };
  }
};

/**
 * Google Sheets setup
 * @returns {Promise<Object>} - Google Sheets document
 */
const setupGoogleSheets = async () => {
  try {
    if (!process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL || !process.env.GOOGLE_PRIVATE_KEY || !process.env.GOOGLE_SHEET_ID) {
      throw new Error('Missing required environment variables for Google Sheets');
    }
    
    const serviceAccountAuth = new JWT({
      email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
      key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });

    const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEET_ID, serviceAccountAuth);
    await doc.loadInfo(); 
    console.log('üìä Google Sheets connected:', doc.title);
    return doc;
  } catch (err) {
    console.error('‚ùå Error setting up Google Sheets:', err);
    throw err;
  }
};

/**
 * Add an expense to Google Sheets
 * @param {string} date - Expense date
 * @param {number} amount - Expense amount
 * @param {string} category - Expense category
 * @param {string} note - Expense description
 * @returns {Promise<boolean>} - Operation result
 */
const addExpenseToSheet = async (date, amount, category, note) => {
  try {
    const doc = await setupGoogleSheets();
    const sheet = doc.sheetsByIndex[0]; 
    
    // Format date
    const formattedDateTime = new Date(date).toLocaleString('uk-UA', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

    await sheet.addRow({
      '–î–∞—Ç–∞': formattedDateTime,
      '–°—É–º–∞': amount,
      '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': category,
      '–ó–∞–ø–∏—Å': note
    });
    
    return true;
  } catch (err) {
    console.error('‚ùå Error adding expense to sheet:', err);
    return false;
  }
};

/**
 * Send expense confirmation
 * @param {Object} ctx - Telegraf context
 * @param {number} amount - Expense amount
 * @param {string} category - Expense category
 * @param {string} note - Expense description
 */
const sendExpenseConfirmation = async (ctx, amount, category, note) => {
  const noteId = Date.now().toString();
  noteStorage[noteId] = note;
  
  await ctx.reply(
    `üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É:*\n` +
    `üìù –¢–µ–∫—Å—Ç: ${note}\n` +
    `üí∞ –°—É–º–∞: ${amount} –≥—Ä–Ω\n` +
    `üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${category}`,
    {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', 
            `confirm_${amount}_${category}_${noteId}`
          ),
          Markup.button.callback('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'cancel')
        ],
        [
          Markup.button.callback('üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é', `change_category_${amount}_${noteId}`),
          Markup.button.callback('‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Å—É–º—É', `change_amount_${amount}_${category}_${noteId}`)
        ]
      ])
    }
  );
};

/**
 * Transcribe audio using Whisper API
 * @param {string} filePath - Path to audio file
 * @returns {Promise<string>} - Transcribed text
 */
const transcribeAudio = async (filePath) => {
  try {
    // First check the file size
    const fileSizeInMB = checkFileSize(filePath);
    if (fileSizeInMB > MAX_FILE_SIZE_MB) {
      console.log(`‚ö†Ô∏è File size (${fileSizeInMB.toFixed(2)} MB) exceeds the maximum allowed (${MAX_FILE_SIZE_MB} MB)`);
      return "–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—Ç—à–µ –∞—É–¥—ñ–æ.";
    }

    console.log(`üéôÔ∏è Converting audio to WAV: ${filePath}`);
    
    // Create path for new file
    const wavPath = filePath.replace(path.extname(filePath), '.wav');

    // Convert to WAV (16 kHz, 1 channel, PCM S16LE)
    await new Promise((resolve, reject) => {
      ffmpeg(filePath)
        .output(wavPath)
        .audioFrequency(16000)
        .audioChannels(1)
        .audioCodec('pcm_s16le')
        .on('end', resolve)
        .on('error', reject)
        .run();
    });

    // Check the converted file size again
    const wavFileSizeInMB = checkFileSize(wavPath);
    if (wavFileSizeInMB > MAX_FILE_SIZE_MB) {
      cleanupFiles([wavPath]);
      return "–ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏–π —Ñ–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—Ç—à–µ –∞—É–¥—ñ–æ.";
    }

    console.log(`üìù Sending audio to Whisper API`);
    
    // Add retry handling
    let retries = 3;
    let lastError = null;
    let response = null;
    
    while (retries > 0) {
      try {
        // Read file again for each attempt
        const fileStream = fs.createReadStream(wavPath);
        
        response = await openai.audio.transcriptions.create({
          file: fileStream,
          model: "whisper-1",
          language: "uk",
          response_format: "text" // Explicitly specify response format
        }, {
          timeout: 60000, // Increase timeout to 60 seconds
          maxRetries: 2, // API built-in retries
        });
        
        // If response received successfully, break the loop
        break;
      } catch (err) {
        lastError = err;
        console.log(`‚ùå Attempt ${3 - retries + 1} failed: ${err.message}`);
        retries--;
        
        // Wait before retry with exponential backoff
        if (retries > 0) {
          const delay = (3 - retries) * 2000;
          console.log(`‚è≥ Waiting ${delay/1000} seconds before retry...`);
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      }
    }
    
    // Clean up temporary WAV file
    cleanupFiles([wavPath]);
    
    // If all attempts failed, throw the last error
    if (!response && lastError) {
      console.error('‚ùå All transcription attempts failed:', lastError);
      
      // As a fallback, try to analyze the file name for keywords
      // This is a temporary solution for testing
      if (filePath.includes('–ø—Ä–æ–¥—É–∫—Ç')) {
        return "–≤–∏—Ç—Ä–∞—Ç–∏–ª–∞ 333 –≥—Ä–Ω –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏";
      }
      return "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∞—É–¥—ñ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.";
    }
    
    console.log(`‚úÖ Transcribed text: ${response.text || response}`);
    const resultText = typeof response === 'string' ? response : response.text;
    return resultText || "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∞—É–¥—ñ–æ.";
  } catch (err) {
    console.error('‚ùå Error transcribing audio:', err);
    
    // Add fallback mechanism in case of complete failure
    try {
      // If OpenAI API is unavailable, we could try to use
      // local recognition or just return a placeholder for testing
      console.log('üîÑ Using fallback recognition mechanism...');
      
      // For demonstration purposes, return text that should be recognized
      // In real app you could add alternative recognition here
      return "–≤–∏—Ç—Ä–∞—Ç–∏–ª–∞ 333 –≥—Ä–Ω –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏";
    } catch (backupErr) {
      console.error('‚ùå Fallback mechanism also failed:', backupErr);
      return "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∞—É–¥—ñ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.";
    }
  }
};

/**
 * Download audio file
 * @param {string} fileId - Telegram file ID
 * @returns {Promise<string>} - Path to downloaded file
 */
const downloadAudioFile = async (fileId) => {
  try {
    const fileInfo = await bot.telegram.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;
    const fileName = `${Date.now()}.ogg`;
    const filePath = path.join(TEMP_DIR, fileName);
    
    console.log(`üì• Downloading file from: ${fileUrl}`);
    
    const response = await axios.get(fileUrl, { 
      responseType: 'stream',
      timeout: 30000,  
      maxContentLength: MAX_FILE_SIZE_MB * 1024 * 1024  
    });
    
    const writer = fs.createWriteStream(filePath);
    response.data.pipe(writer);
    
    return new Promise((resolve, reject) => {
      writer.on('finish', () => {
        console.log(`‚úÖ File downloaded successfully: ${filePath}`);
        resolve(filePath);
      });
      writer.on('error', (err) => {
        console.error(`‚ùå Error writing file: ${err.message}`);
        reject(err);
      });
    });
  } catch (err) {
    console.error('‚ùå Error downloading audio:', err);
    throw err;
  }
};

/**
 * Clean up temporary files
 * @param {Array<string>} filePaths - Array of file paths
 */
const cleanupFiles = (filePaths) => {
  filePaths.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      try {
        fs.unlinkSync(filePath);
        console.log(`üóëÔ∏è Deleted file: ${filePath}`);
      } catch (err) {
        console.error(`‚ùå Error deleting file ${filePath}:`, err);
      }
    }
  });
};

// Handle voice messages
bot.on(['voice', 'audio'], async (ctx) => {
  try {
    await ctx.reply('üéôÔ∏è Processing your audio...');
    
    const fileId = ctx.message.voice ? ctx.message.voice.file_id : ctx.message.audio.file_id;
    const filePath = await downloadAudioFile(fileId);
    
    // Check the file size before processing
    const fileSizeInMB = checkFileSize(filePath);
    if (fileSizeInMB > MAX_FILE_SIZE_MB) {
      await ctx.reply(`‚ö†Ô∏è –§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π (${fileSizeInMB.toFixed(2)} MB). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä ${MAX_FILE_SIZE_MB} MB.`);
      cleanupFiles([filePath]);
      return;
    }
    
    await ctx.reply('üîÑ Recognizing text...');
    const transcribedText = await transcribeAudio(filePath);
    
    await ctx.reply(`üìù Recognized text: "${transcribedText}"`);
    
    await ctx.reply('üí∞ Analyzing expenses...');
    const analysisResult = analyzeExpense(transcribedText);
    
    if (analysisResult.error) {
      await ctx.reply(`‚ùå ${analysisResult.error}`);
    } else {
      await sendExpenseConfirmation(
        ctx, 
        analysisResult.amount, 
        analysisResult.category, 
        transcribedText
      );
    }
    
    cleanupFiles([filePath]);
  } catch (err) {
    console.error('‚ùå Error processing voice message:', err);
    await ctx.reply('‚ùå An error occurred while processing the voice message');
  }
});

// Handle text messages
bot.on('text', async (ctx) => {
  if (ctx.message.text.startsWith('/')) return; 
  
  try {
    await ctx.reply('üí∞ Analyzing expenses...');
    const analysisResult = analyzeExpense(ctx.message.text);
    
    if (analysisResult.error) {
      await ctx.reply(`‚ùå ${analysisResult.error}`);
    } else {
      await sendExpenseConfirmation(
        ctx, 
        analysisResult.amount, 
        analysisResult.category, 
        ctx.message.text
      );
    }
  } catch (err) {
    console.error('‚ùå Error processing text message:', err);
    await ctx.reply('‚ùå An error occurred while processing the message');
  }
});

// Handle expense confirmation
bot.action(/confirm_(.+)_(.+)_(.+)/, async (ctx) => {
  try {
    const amount = parseFloat(ctx.match[1]);
    const category = ctx.match[2];
    const noteId = ctx.match[3];
    const note = noteStorage[noteId];
    
    if (!note) {
      await ctx.reply('‚ùå Could not find expense data. Please try again.');
      return;
    }
    
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    await ctx.reply('‚è≥ Saving data...');
    
    const currentDate = new Date().toISOString();
    const success = await addExpenseToSheet(currentDate, amount, category, note);
    
    if (success) {
      await ctx.reply('‚úÖ Thank you for using the bot! Your expenses have been saved successfully.');
      delete noteStorage[noteId];
    } else {
      await ctx.reply('‚ùå Error saving expenses. Please try again later.');
    }
  } catch (err) {
    console.error('‚ùå Error confirming expense:', err);
    await ctx.reply('‚ùå Error saving expense');
  }
});

// Handle cancellation
bot.action('cancel', async (ctx) => {
  try {
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    await ctx.reply('‚ùå Expense cancelled');
  } catch (err) {
    console.error('‚ùå Error cancelling:', err);
    await ctx.reply('‚ùå Error cancelling action');
  }
});

// Handle category change
bot.action(/change_category_(.+)_(.+)/, async (ctx) => {
  try {
    const amount = parseFloat(ctx.match[1]);
    const noteId = ctx.match[2];
    const note = noteStorage[noteId];
    
    if (!note) {
      await ctx.reply('‚ùå Could not find expense data. Please try again.');
      return;
    }
    
    const buttons = [];
    for (let i = 0; i < DEFAULT_CATEGORIES.length; i += 2) {
      const row = [];
      row.push(Markup.button.callback(DEFAULT_CATEGORIES[i], `set_category_${amount}_${DEFAULT_CATEGORIES[i]}_${noteId}`));
      
      if (i + 1 < DEFAULT_CATEGORIES.length) {
        row.push(Markup.button.callback(DEFAULT_CATEGORIES[i+1], `set_category_${amount}_${DEFAULT_CATEGORIES[i+1]}_${noteId}`));
      }
      
      buttons.push(row);
    }
    
    await ctx.editMessageReplyMarkup(Markup.inlineKeyboard(buttons));
  } catch (err) {
    console.error('‚ùå Error changing category:', err);
    await ctx.reply('‚ùå Error changing category');
  }
});

// Handle category selection
bot.action(/set_category_(.+)_(.+)_(.+)/, async (ctx) => {
  try {
    const amount = parseFloat(ctx.match[1]);
    const category = ctx.match[2];
    const noteId = ctx.match[3];
    const note = noteStorage[noteId];
    
    if (!note) {
      await ctx.reply('‚ùå Could not find expense data. Please try again.');
      return;
    }
    
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    
    await sendExpenseConfirmation(ctx, amount, category, note);
  } catch (err) {
    console.error('‚ùå Error selecting category:', err);
    await ctx.reply('‚ùå Error selecting category');
  }
});

// Handle amount change request
bot.action(/change_amount_(.+)_(.+)_(.+)/, async (ctx) => {
  try {
    const currentAmount = parseFloat(ctx.match[1]);
    const category = ctx.match[2];
    const noteId = ctx.match[3];
    
    if (!noteStorage[noteId]) {
      await ctx.reply('‚ùå Could not find expense data. Please try again.');
      return;
    }
    
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    
    // Save data in session context
    ctx.session = ctx.session || {};
    ctx.session.pendingAmount = {
      category,
      noteId
    };
    
    await ctx.reply(
      `üí∞ Current amount: ${currentAmount} UAH\n` +
      `Please enter a new amount (number only):`,
      Markup.forceReply()
    );
  } catch (err) {
    console.error('‚ùå Error requesting amount change:', err);
    await ctx.reply('‚ùå Error changing amount');
  }
});

// Handle start command
bot.start(async (ctx) => {
  await ctx.reply(
    `üëã Hello, ${ctx.message.from.first_name}!\n
I am your expense tracking assistant. Send me text or voice message with a purchase, and I will analyze the expenses and help you record them in a Google Sheet.  
      
üìå How to use:  
- Send a **text** or **voice message** about a purchase.  
- I will recognize the amount and category of expense.  
- Confirm the record ‚Äî and I will save it in Google Sheets.  
      
üöÄ Ready to start? Send your first purchase!`
  );
});

// Handle help command
bot.command('help', async (ctx) => {
  await ctx.reply(
    'ü§ñ *How to use the bot:*\n\n' +
    '1. Record a voice message or send text describing your expenses\n' +
    '2. I will automatically recognize the text and analyze the expenses\n' +
    '3. You will receive a confirmation message\n' +
    '4. Confirm the expense or change the category or amount\n' +
    '5. After confirmation, the data will be added to a Google spreadsheet\n\n' +
    '*Available categories:*\n' +
    DEFAULT_CATEGORIES.map(cat => `‚Ä¢ ${cat}`).join('\n'),
    { parse_mode: 'Markdown' }
  );
});

// Middleware for handling amount change responses
bot.use(async (ctx, next) => {
  // Skip non-text messages or messages from bots
  if (!ctx.message || !ctx.message.text || ctx.message.from.is_bot) {
    return next();
  }
  
  // Check if we're waiting for a response to change amount
  if (ctx.session && ctx.session.pendingAmount) {
    const { category, noteId } = ctx.session.pendingAmount;
    const note = noteStorage[noteId];
    
    if (!note) {
      await ctx.reply('‚ùå Session expired. Please try again.');
      delete ctx.session.pendingAmount;
      return next();
    }
    
    // Validate entered amount
    const newAmount = parseFloat(ctx.message.text.replace(',', '.'));
    if (isNaN(newAmount) || newAmount <= 0) {
      await ctx.reply('‚ùå Please enter a valid amount (positive number)');
      return;
    }
    
    // Clear session data
    delete ctx.session.pendingAmount;
    
    // Send confirmation with new amount
    await sendExpenseConfirmation(ctx, newAmount, category, note);
    return;
  }
  
  return next();
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    service: 'expense-tracker-bot',
    version: '1.0.0'
  });
});

// Webhook endpoint
app.post('/webhook', (req, res) => {
  bot.handleUpdate(req.body, res);
});

// Bot launch function
const startBot = async () => {
  try {
    // Delete previous webhook
    await bot.telegram.deleteWebhook();
    
    // Launch bot in webhook or polling mode
    if (process.env.USE_WEBHOOK && process.env.WEBHOOK_DOMAIN) {
      await bot.launch({
        webhook: {
          domain: process.env.WEBHOOK_DOMAIN,
          path: '/webhook'
        }
      });
      console.log('ü§ñ Telegram bot successfully launched in webhook mode');
    } else {
      await bot.launch();
      console.log('ü§ñ Telegram bot successfully launched in polling mode');
    }
  } catch (err) {
    console.error('‚ùå Error launching bot:', err);
  }
};

// Launch bot and server
startBot();

app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
});

// Handle termination
process.once('SIGINT', () => {
  bot.stop('SIGINT');
  console.log('üõë Bot stopped');
});

process.once('SIGTERM', () => {
  bot.stop('SIGTERM');
  console.log('üõë Bot stopped');
});