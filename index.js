import dotenv from 'dotenv';
import { Telegraf, Markup } from 'telegraf';
import express from 'express';
import fs from 'fs';
import fetch from 'node-fetch';
import path from 'path';
import axios from 'axios';
import { fileURLToPath } from 'url';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';

const filename = fileURLToPath(import.meta.url);
const dirname = path.dirname(filename);

dotenv.config();

const PORT = process.env.PORT || 3000 || 3001;
const TEMP_DIR = path.join(dirname, 'temp');
const WIT_TOKEN = process.env.WIT_AI_TOKEN;

if (!fs.existsSync(TEMP_DIR)) {
  fs.mkdirSync(TEMP_DIR, { recursive: true });
}

const app = express();
app.use(express.json());

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

const noteStorage = {};

const trainingData = JSON.parse(fs.readFileSync('training-data.json', 'utf8'));

async function trainWit() {
  if (!WIT_TOKEN) {
    console.log('‚ö†Ô∏è WIT_AI_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–∞–≤—á–∞–Ω–Ω—è');
    return;
  }
  
  for (const data of trainingData) {
    await fetch(`https://api.wit.ai/entities`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${WIT_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });
  }
}

trainWit().then(() => {
  console.log('–ù–∞–≤—á–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}).catch(err => {
  console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–≤—á–∞–Ω–Ω—ñ:', err);
});

const analyzeExpense = (text) => {
  try {
    const amountRegex = /(\d+(?:[.,]\d+)?)\s*(–≥—Ä–Ω|–≥—Ä–∏–≤–µ–Ω—å|–≥—Ä–Ω\.|‚Ç¥|uah|)/gi;
    const amountMatch = amountRegex.exec(text);
    
    let amount = 0;
    if (amountMatch) {
      amount = parseFloat(amountMatch[1].replace(',', '.'));
    } else {
      const numberMatch = /(\d+(?:[.,]\d+)?)/.exec(text);
      if (numberMatch) {
        amount = parseFloat(numberMatch[1].replace(',', '.'));
      }
    }
    
    let category = '—ñ–Ω—à—ñ';
    
    const lowerText = text.toLowerCase();
    
    if (/–ø—Ä–æ–¥[–∞—É]–∫—Ç|—ó–∂[–∞—ñ]|—Ö–ª—ñ–±|–º–æ–ª–æ–∫–æ|–æ–≤–æ—á|—Ñ—Ä—É–∫—Ç/i.test(lowerText)) {
      category = '–ø—Ä–æ–¥—É–∫—Ç–∏';
    } else if (/–∫–∞—Ñ[–µ—î]|—Ä–µ—Å—Ç–æ—Ä–∞–Ω|—ó–¥–∞–ª—å–Ω|–æ–±—ñ–¥|–≤–µ—á–µ—Ä[—è—é]|—Å–Ω—ñ–¥–∞–Ω[–æ–∫]/i.test(lowerText)) {
      category = '–∫–∞—Ñ–µ';
    } else if (/–∫–æ–º—É–Ω–∞–ª|—Å–≤—ñ—Ç–ª–æ|–≥–∞–∑|–≤–æ–¥[–∞–∏]|–æ–ø–∞–ª–µ–Ω|–µ–ª–µ–∫—Ç—Ä–æ/i.test(lowerText)) {
      category = '–∫–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏';
    } else if (/—Å–ø–æ—Ä—Ç|—Ç—Ä–µ–Ω—É|—Ñ—ñ—Ç–Ω–µ—Å|–∞–±–æ–Ω–µ–º–µ–Ω—Ç|–∑–∞–ª/i.test(lowerText)) {
      category = '—Å–ø–æ—Ä—Ç';
    } else if (/–∑–æ—à–∏—Ç|—Ä—É—á–∫|–æ–ª—ñ–≤—Ü|–ø–∞–ø—ñ—Ä|–∫–∞–Ω—Ü|–∫–Ω–∏–≥/i.test(lowerText)) {
      category = '–∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–∏';
    } else if (/–æ–¥—è–≥|–≤–∑—É—Ç—Ç|—Å–æ—Ä–æ—á|–º–∞–≥–∞–∑–∏–Ω|–∫—É–ø–∏–≤|–∫—É–ø–∏–ª|–ø—Ä–∏–¥–±–∞/i.test(lowerText)) {
      category = '–ø–æ–∫—É–ø–∫–∏';
    }
    
    return { amount, category };
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –≤–∏—Ç—Ä–∞—Ç:', err);
    return { error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –≤–∏—Ç—Ä–∞—Ç' };
  }
};

const setupGoogleSheets = async () => {
  try {
    const serviceAccountAuth = new JWT({
      email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
      key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });

    const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEET_ID, serviceAccountAuth);
    await doc.loadInfo(); 
    console.log('üìä Google Sheets –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ:', doc.title);
    return doc;
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google Sheets:', err);
    throw err;
  }
};

const addExpenseToSheet = async (date, amount, category, note) => {
  try {
    const doc = await setupGoogleSheets();
    const sheet = doc.sheetsByIndex[0]; 
    await sheet.addRow({
      '–î–∞—Ç–∞': date,
      '–°—É–º–∞': amount,
      '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': category,
      '–ó–∞–ø–∏—Å': note
    });
    
    return true;
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ:', err);
    return false;
  }
};

const sendExpenseConfirmation = async (ctx, amount, category, note) => {
  const noteId = Date.now().toString();
  noteStorage[noteId] = note;
  
  await ctx.reply(
    `üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É:*\n` +
    `üìù –¢–µ–∫—Å—Ç: ${note}\n` +
    `üí∞ –°—É–º–∞: ${amount}\n` +
    `üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${category}`,
    {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', 
            `confirm_${amount}_${category}_${noteId}`
          ),
          Markup.button.callback('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'cancel')
        ],
        [
          Markup.button.callback('üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é', `change_category_${amount}_${noteId}`)
        ]
      ])
    }
  );
};

const transcribeAudio = async (filePath) => {
  try {
    if (!process.env.WIT_AI_TOKEN) {
      console.log('‚ö†Ô∏è WIT_AI_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ç–µ–∫—Å—Ç');
      return "800 –≥—Ä–∏–≤–µ–Ω—å —Å–æ—Ä–æ—á–∫–∞";
    }

    const formData = new FormData();
    formData.append('file', fs.createReadStream(filePath), {
      filename: path.basename(filePath),
      contentType: 'audio/ogg'
    });

    const response = await axios.post(
      'https://api.wit.ai/speech?v=20230215',
      formData,
      {
        headers: {
          'Authorization': `Bearer ${process.env.WIT_AI_TOKEN}`,
          'Content-Type': 'multipart/form-data'
        }
      }
    );

    if (response.data && response.data.text) {
      return response.data.text;
    } else {
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑ Wit.ai');
    }
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—ñ—ó –∞—É–¥—ñ–æ:', err);
    return "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∞—É–¥—ñ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º.";
  }
};

const downloadAudioFile = async (fileId) => {
  try {
    const fileInfo = await bot.telegram.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;
    const fileName = `${Date.now()}.ogg`;
    const filePath = path.join(TEMP_DIR, fileName);
    
    const response = await axios.get(fileUrl, { responseType: 'stream' });
    const writer = fs.createWriteStream(filePath);
    response.data.pipe(writer);
    
    return new Promise((resolve, reject) => {
      writer.on('finish', () => resolve(filePath));
      writer.on('error', reject);
    });
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ:', err);
    throw err;
  }
};

const cleanupFiles = (filePaths) => {
  filePaths.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      try {
        fs.unlinkSync(filePath);
        console.log(`–í–∏–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª: ${filePath}`);
      } catch (err) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É ${filePath}:`, err);
      }
    }
  });
};

bot.on(['voice', 'audio'], async (ctx) => {
  try {
    await ctx.reply('üéôÔ∏è –û–±—Ä–æ–±–ª—è—é –≤–∞—à–µ –∞—É–¥—ñ–æ...');
    
    const fileId = ctx.message.voice ? ctx.message.voice.file_id : ctx.message.audio.file_id;
    const filePath = await downloadAudioFile(fileId);
    
    await ctx.reply('üîÑ –†–æ–∑–ø—ñ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...');
    const transcribedText = await transcribeAudio(filePath);
    
    await ctx.reply(`üìù –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: "${transcribedText}"`);
    
    await ctx.reply('üí∞ –ê–Ω–∞–ª—ñ–∑—É—é –≤–∏—Ç—Ä–∞—Ç–∏...');
    const analysisResult = analyzeExpense(transcribedText);
    
    if (analysisResult.error) {
      await ctx.reply(`‚ùå ${analysisResult.error}`);
    } else {
      await sendExpenseConfirmation(
        ctx, 
        analysisResult.amount, 
        analysisResult.category, 
        transcribedText
      );
    }
    
    cleanupFiles([filePath]);
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', err);
    await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
  }
});

bot.on('text', async (ctx) => {
  if (ctx.message.text.startsWith('/')) return; 
  
  try {
    await ctx.reply('üí∞ –ê–Ω–∞–ª—ñ–∑—É—é –≤–∏—Ç—Ä–∞—Ç–∏...');
    const analysisResult = analyzeExpense(ctx.message.text);
    
    if (analysisResult.error) {
      await ctx.reply(`‚ùå ${analysisResult.error}`);
    } else {
      await sendExpenseConfirmation(
        ctx, 
        analysisResult.amount, 
        analysisResult.category, 
        ctx.message.text
      );
    }
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', err);
    await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
  }
});

bot.action(/confirm_(.+)_(.+)_(.+)/, async (ctx) => {
  try {
    const amount = parseFloat(ctx.match[1]);
    const category = ctx.match[2];
    const noteId = ctx.match[3];
    const note = noteStorage[noteId];
    
    if (!note) {
      await ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.');
      return;
    }
    
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    await ctx.reply('‚è≥ –ó–±–µ—Ä—ñ–≥–∞—é –¥–∞–Ω—ñ...');
    
    const currentDate = new Date().toISOString();
    const success = await addExpenseToSheet(currentDate, amount, category, note);
    
    if (success) {
      await ctx.reply('‚úÖ –î—è–∫—É—é –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞! –í–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.');
      delete noteStorage[noteId];
    } else {
      await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç');
    }
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:', err);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏');
  }
});

bot.action('cancel', async (ctx) => {
  await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
  await ctx.reply('‚ùå –í–∏—Ç—Ä–∞—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
});

bot.action(/change_category_(.+)_(.+)/, async (ctx) => {
  try {
    const amount = parseFloat(ctx.match[1]);
    const noteId = ctx.match[2];
    const note = noteStorage[noteId];
    
    if (!note) {
      await ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.');
      return;
    }
    
    const categories = ['–ø—Ä–æ–¥—É–∫—Ç–∏', '–∫–∞—Ñ–µ', '–ø–æ–∫—É–ø–∫–∏', '–∫–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏', '—Å–ø–æ—Ä—Ç', '–∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–∏', '—ñ–Ω—à—ñ'];
    
    const buttons = [];
    for (let i = 0; i < categories.length; i += 2) {
      const row = [];
      row.push(Markup.button.callback(categories[i], `set_category_${amount}_${categories[i]}_${noteId}`));
      
      if (i + 1 < categories.length) {
        row.push(Markup.button.callback(categories[i+1], `set_category_${amount}_${categories[i+1]}_${noteId}`));
      }
      
      buttons.push(row);
    }
    
    await ctx.editMessageReplyMarkup(Markup.inlineKeyboard(buttons));
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:', err);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó');
  }
});

bot.action(/set_category_(.+)_(.+)_(.+)/, async (ctx) => {
  try {
    const amount = parseFloat(ctx.match[1]);
    const category = ctx.match[2];
    const noteId = ctx.match[3];
    const note = noteStorage[noteId];
    
    if (!note) {
      await ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.');
      return;
    }
    
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    
    await sendExpenseConfirmation(ctx, amount, category, note);
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:', err);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó');
  }
});

bot.command('start', async (ctx) => {
  await ctx.reply(
    '–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤–∏—Ç—Ä–∞—Ç. üí∞\n\n' +
    '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —Ç–µ–∫—Å—Ç –∑ –æ–ø–∏—Å–æ–º –≤–∞—à–∏—Ö –≤–∏—Ç—Ä–∞—Ç, —ñ —è –≤–∏–∑–Ω–∞—á—É —Å—É–º—É —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.\n\n' +
    '–ù–∞–ø—Ä–∏–∫–ª–∞–¥: "–ö—É–ø–∏–≤ –ø—Ä–æ–¥—É–∫—Ç–∏ –Ω–∞ 450 –≥—Ä–∏–≤–µ–Ω—å" –∞–±–æ "–ó–∞–ø–ª–∞—Ç–∏–≤ –∑–∞ –∫–æ–º—É–Ω–∞–ª—å–Ω—ñ 1200"'
  );
});

bot.command('help', async (ctx) => {
  await ctx.reply(
    'ü§ñ *–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:*\n\n' +
    '1. –ó–∞–ø–∏—à—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑ –æ–ø–∏—Å–æ–º –≤–∏—Ç—Ä–∞—Ç\n' +
    '2. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É—é –≤–∏—Ç—Ä–∞—Ç–∏\n' +
    '3. –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º\n' +
    '4. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∏—Ç—Ä–∞—Ç—É –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é\n' +
    '5. –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –¥–æ Google —Ç–∞–±–ª–∏—Ü—ñ\n\n' +
    '*–î–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:*\n' +
    '‚Ä¢ –ø—Ä–æ–¥—É–∫—Ç–∏ üõí\n' +
    '‚Ä¢ –∫–∞—Ñ–µ üçΩÔ∏è\n' +
    '‚Ä¢ –ø–æ–∫—É–ø–∫–∏ üõçÔ∏è\n' +
    '‚Ä¢ –∫–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏ üí°\n' +
    '‚Ä¢ —Å–ø–æ—Ä—Ç üèãÔ∏è\n' +
    '‚Ä¢ –∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–∏ üìù\n' +
    '‚Ä¢ —ñ–Ω—à—ñ üîÑ',
    { parse_mode: 'Markdown' }
  );
});

app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    service: 'expense-tracker-bot',
    version: '1.0.0'
  });
});

app.post('/webhook', (req, res) => {
  bot.handleUpdate(req.body, res);
});

const startBot = async () => {
  try {
    await bot.telegram.deleteWebhook();
    
    if (process.env.USE_WEBHOOK && process.env.WEBHOOK_DOMAIN) {
      await bot.launch({
        webhook: {
          domain: process.env.WEBHOOK_DOMAIN,
          path: '/webhook'
        }
      });
      console.log('ü§ñ Telegram –±–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∂–∏–º—ñ webhook');
    } else {
      await bot.launch();
      console.log('ü§ñ Telegram –±–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∂–∏–º—ñ polling');
    }
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:', err);
  }
};

startBot();

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));