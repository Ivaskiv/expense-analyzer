import dotenv from 'dotenv';
import { Telegraf } from 'telegraf';
import express from 'express';
import fs from 'fs';
import path from 'path';
import axios from 'axios';
import { spawn } from 'child_process';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { fileURLToPath } from 'url';

// ES modules equivalent for dirname
const filename = fileURLToPath(import.meta.url);
const dirname = path.dirname(filename);

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
dotenv.config();

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Generative AI
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
const model = genAI.getGenerativeModel({ model: process.env.GEMINI_MODEL_NAME || 'gemini-pro' });

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
const PORT = process.env.PORT || 3000;
const TEMP_DIR = path.join(dirname, 'temp');
const COQUI_MODEL_PATH = process.env.COQUI_MODEL_PATH || path.join(dirname, 'models/ukrainian');

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
if (!fs.existsSync(TEMP_DIR)) {
  fs.mkdirSync(TEMP_DIR, { recursive: true });
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Express
const app = express();
app.use(express.json({
  verify: (req, res, buf, encoding) => {
    req.rawBody = buf.toString(encoding || 'utf8');
  },
  strict: false
}));

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

/**
 * –ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É –¥–ª—è –≤–∏–¥—ñ–ª–µ–Ω–Ω—è —Å—É–º–∏ —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É (—Å—É–º–∞ —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è)
 */
const analyzeExpense = async (text) => {
  const EXPENSE_PROMPT = `–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü—ñ –≤–∏—Ç—Ä–∞—Ç–∏: "${text}" —ñ –≤–∏–∑–Ω–∞—á —Å—É–º—É —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.
–°—É–º–∞ - —Ü–µ —á–∏—Å–ª–æ –±–µ–∑ –≤–∞–ª—é—Ç–∏.
–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó: –ø—Ä–æ–¥—É–∫—Ç–∏, –∫–∞—Ñ–µ, –ø–æ–∫—É–ø–∫–∏, –∫–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏, —Å–ø–æ—Ä—Ç, –∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–∏, —ñ–Ω—à—ñ.
–Ø–∫—â–æ —Ç–µ–∫—Å—Ç –º—ñ—Å—Ç–∏—Ç—å —Å–ª–æ–≤–∞ –ø—Ä–æ –∑–æ—à–∏—Ç–∏, —Ä—É—á–∫–∏, –æ–ª—ñ–≤—Ü—ñ, –ø–∞–ø—ñ—Ä - —Ü–µ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è "–∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–∏".
–ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º—É: —Å—É–º—É (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ) —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "500, –∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–∏"`;

  try {
    const result = await model.generateContent(EXPENSE_PROMPT);
    const response = result.response.text().trim();
    const match = response.match(/(\d+(?:\.\d+)?)\s*,\s*([–∞-—è—ñ—ó—î“ë–ê-–Ø–Ü–á–Ñ“ê\s]+)/);
    return match 
      ? { amount: parseFloat(match[1]), category: match[2].trim() } 
      : { error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç', rawResponse: response };
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –≤–∏—Ç—Ä–∞—Ç:', err);
    return { error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –≤–∏—Ç—Ä–∞—Ç' };
  }
};

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –∞—É–¥—ñ–æ
 */
bot.on(['voice', 'audio'], async (ctx) => {
  try {
    await ctx.reply('üéôÔ∏è –û–±—Ä–æ–±–ª—è—é –≤–∞—à–µ –∞—É–¥—ñ–æ...');
    
    const fileId = ctx.message.voice ? ctx.message.voice.file_id : ctx.message.audio.file_id;
    const filePath = await downloadAudioFile(fileId);
    
    await ctx.reply('üîÑ –†–æ–∑–ø—ñ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...');
    const transcribedText = await transcribeAudio(filePath);
    
    await ctx.reply(`üìù –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: "${transcribedText}"`);
    
    await ctx.reply('üí∞ –ê–Ω–∞–ª—ñ–∑—É—é –≤–∏—Ç—Ä–∞—Ç–∏...');
    const analysisResult = await analyzeExpense(transcribedText);
    
    if (analysisResult.error) {
      await ctx.reply(`‚ùå ${analysisResult.error}`);
    } else {
      await ctx.reply(`‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\nüí∞ –°—É–º–∞: ${analysisResult.amount} –≥—Ä–Ω\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${analysisResult.category}`);
    }
    
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
    cleanupFiles([filePath]);
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', err);
    await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
  }
});

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É –∑ Telegram
 * @param {string} fileId - ID —Ñ–∞–π–ª—É –≤ Telegram
 * @returns {Promise<string>} - –®–ª—è—Ö –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
 */
const downloadAudioFile = async (fileId) => {
  try {
    const fileInfo = await bot.telegram.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;
    const fileName = `${Date.now()}.ogg`;
    const filePath = path.join(TEMP_DIR, fileName);
    
    const response = await axios.get(fileUrl, { responseType: 'stream' });
    const writer = fs.createWriteStream(filePath);
    response.data.pipe(writer);
    
    return new Promise((resolve, reject) => {
      writer.on('finish', () => resolve(filePath));
      writer.on('error', reject);
    });
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ:', err);
    throw err;
  }
};

/**
 * –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—ñ—è –∞—É–¥—ñ–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Coqui STT
 * @param {string} filePath - –®–ª—è—Ö –¥–æ –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É
 * @returns {Promise<string>} - –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
 */
const transcribeAudio = async (filePath) => {
  try {
    const wavFilePath = `${filePath}.wav`;
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∞—É–¥—ñ–æ –≤ WAV —Ñ–æ—Ä–º–∞—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ffmpeg
    await new Promise((resolve, reject) => {
      const ffmpeg = spawn('ffmpeg', [
        '-i', filePath, 
        '-ar', '16000',  // –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü—ñ—ó 16kHz
        '-ac', '1',      // –ú–æ–Ω–æ –∫–∞–Ω–∞–ª
        '-f', 'wav',     // WAV —Ñ–æ—Ä–º–∞—Ç
        wavFilePath
      ]);
      
      ffmpeg.stderr.on('data', (data) => {
        console.log(`ffmpeg stderr: ${data}`);
      });
      
      ffmpeg.on('close', code => {
        if (code === 0) {
          resolve();
        } else {
          reject(new Error(`ffmpeg process exited with code ${code}`));
        }
      });
    });
    
    // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—ñ—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Coqui STT
    return new Promise((resolve, reject) => {
      const coqui = spawn('stt', ['--model', COQUI_MODEL_PATH, '--audio', wavFilePath]);
      let transcribedText = '';
      
      coqui.stdout.on('data', data => {
        transcribedText += data.toString();
      });
      
      coqui.stderr.on('data', (data) => {
        console.log(`coqui stderr: ${data}`);
      });
      
      coqui.on('close', code => {
        if (code === 0) {
          resolve(transcribedText.trim());
        } else {
          reject(new Error(`Coqui STT failed with code ${code}`));
        }
      });
    });
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—ñ—ó –∞—É–¥—ñ–æ:', err);
    throw err;
  }
};

/**
 * –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
 * @param {Array<string>} filePaths - –ú–∞—Å–∏–≤ —à–ª—è—Ö—ñ–≤ –¥–æ —Ñ–∞–π–ª—ñ–≤
 */
const cleanupFiles = (filePaths) => {
  filePaths.forEach(filePath => {
    const basePath = filePath.substring(0, filePath.lastIndexOf('.'));
    ['.ogg', '.wav', '.txt'].forEach(ext => {
      const fileToDelete = `${basePath}${ext}`;
      if (fs.existsSync(fileToDelete)) {
        try {
          fs.unlinkSync(fileToDelete);
          console.log(`–í–∏–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª: ${fileToDelete}`);
        } catch (err) {
          console.error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É ${fileToDelete}:`, err);
        }
      }
    });
  });
};

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
bot.command('start', async (ctx) => {
  await ctx.reply(
    '–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤–∏—Ç—Ä–∞—Ç. üí∞\n\n' +
    '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–ø–∏—Å–æ–º –≤–∞—à–∏—Ö –≤–∏—Ç—Ä–∞—Ç, —ñ —è –≤–∏–∑–Ω–∞—á—É —Å—É–º—É —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.\n\n' +
    '–ù–∞–ø—Ä–∏–∫–ª–∞–¥: "–ö—É–ø–∏–≤ –ø—Ä–æ–¥—É–∫—Ç–∏ –Ω–∞ 450 –≥—Ä–∏–≤–µ–Ω—å" –∞–±–æ "–ó–∞–ø–ª–∞—Ç–∏–≤ –∑–∞ –∫–æ–º—É–Ω–∞–ª—å–Ω—ñ 1200"'
  );
});

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /help
bot.command('help', async (ctx) => {
  await ctx.reply(
    'ü§ñ *–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:*\n\n' +
    '1. –ó–∞–ø–∏—à—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–ø–∏—Å–æ–º –≤–∏—Ç—Ä–∞—Ç\n' +
    '2. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É—é –≤–∏—Ç—Ä–∞—Ç–∏\n' +
    '3. –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å—É–º—É —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç\n\n' +
    '*–î–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:*\n' +
    '‚Ä¢ –ø—Ä–æ–¥—É–∫—Ç–∏ üõí\n' +
    '‚Ä¢ –∫–∞—Ñ–µ üçΩÔ∏è\n' +
    '‚Ä¢ –ø–æ–∫—É–ø–∫–∏ üõçÔ∏è\n' +
    '‚Ä¢ –∫–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏ üí°\n' +
    '‚Ä¢ —Å–ø–æ—Ä—Ç üèãÔ∏è\n' +
    '‚Ä¢ –∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–∏ üìù\n' +
    '‚Ä¢ —ñ–Ω—à—ñ üîÑ',
    { parse_mode: 'Markdown' }
  );
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('ü§ñ Telegram –±–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ');
}).catch(err => {
  console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:', err);
});

// –ó–∞–ø—É—Å–∫ Express —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));