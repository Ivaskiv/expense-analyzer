import dotenv from 'dotenv';
import { Telegraf, Markup } from 'telegraf';
import express from 'express';
import fs from 'fs';
import path from 'path';
import axios from 'axios';
import { fileURLToPath } from 'url';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import OpenAI from 'openai';
import { exec } from 'child_process';
import ffmpeg from 'fluent-ffmpeg';

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —à–ª—è—Ö—ñ–≤
const filename = fileURLToPath(import.meta.url);
const dirname = path.dirname(filename);

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
dotenv.config();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
const PORT = process.env.PORT || 3000;
const TEMP_DIR = path.join(dirname, 'temp');
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const DEFAULT_CATEGORIES = ['–ø—Ä–æ–¥—É–∫—Ç–∏', '–∫–∞—Ñ–µ', '–ø–æ–∫—É–ø–∫–∏', '–∫–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏', '—Å–ø–æ—Ä—Ç', '–∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–∏', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '—Ä–æ–∑–≤–∞–≥–∏', '–∑–¥–æ—Ä–æ–≤\'—è', '—ñ–Ω—à—ñ'];

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î —Ç–∏–º—á–∞—Å–æ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è
if (!fs.existsSync(TEMP_DIR)) {
  fs.mkdirSync(TEMP_DIR, { recursive: true });
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Express App
const app = express();
app.use(express.json());

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
if (!TELEGRAM_BOT_TOKEN) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
  process.exit(1);
}

if (!process.env.OPENAI_API_KEY) {
  console.error('‚ùå OPENAI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
  process.exit(1);
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞
const bot = new Telegraf(TELEGRAM_BOT_TOKEN);
const noteStorage = {};

/**
 * –ê–Ω–∞–ª—ñ–∑—É—î —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
 * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É –∑ —Å—É–º–æ—é —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
 */
const analyzeExpense = (text) => {
  try {
    if (!text || typeof text !== 'string') {
      return { error: '–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π' };
    }
    
    // –ü–æ—à—É–∫ —Å—É–º–∏ –∑ –≤–∞–ª—é—Ç–æ—é
    const amountRegex = /(\d+(?:[.,]\d+)?)\s*(–≥—Ä–Ω|–≥—Ä–∏–≤–µ–Ω—å|–≥—Ä–Ω\.|‚Ç¥|uah|)/gi;
    let amountMatch = amountRegex.exec(text);
    
    let amount = 0;
    if (amountMatch) {
      // –ó–∞–º—ñ–Ω—é—î–º–æ –∫–æ–º—É –Ω–∞ –∫—Ä–∞–ø–∫—É –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É
      amount = parseFloat(amountMatch[1].replace(',', '.'));
    } else {
      // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–∞
      const numberMatch = /(\d+(?:[.,]\d+)?)/.exec(text);
      if (numberMatch) {
        amount = parseFloat(numberMatch[1].replace(',', '.'));
      }
    }
    
    // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    let category = '—ñ–Ω—à—ñ';
    const lowerText = text.toLowerCase();
    
    const categoryPatterns = {
      '–ø—Ä–æ–¥—É–∫—Ç–∏': /–ø—Ä–æ–¥[–∞—É]–∫—Ç|—ó–∂[–∞—ñ—É]|—Ö–ª—ñ–±|–º–æ–ª–æ–∫–æ|–æ–≤–æ—á|—Ñ—Ä—É–∫—Ç|–º–∞–≥–∞–∑–∏–Ω|—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç|–º–∞—Ä–∫–µ—Ç/i,
      '–∫–∞—Ñ–µ': /–∫–∞—Ñ[–µ—î]|—Ä–µ—Å—Ç–æ—Ä–∞–Ω|—ó–¥–∞–ª—å–Ω|–æ–±—ñ–¥|–≤–µ—á–µ—Ä[—è—é]|—Å–Ω—ñ–¥–∞–Ω[–æ–∫]|–ø—ñ—Ü[–∞—É]|—Å—É—à—ñ|—Ñ–∞—Å—Ç—Ñ—É–¥/i,
      '–∫–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–æ—Å–ª—É–≥–∏': /–∫–æ–º—É–Ω–∞–ª|—Å–≤—ñ—Ç–ª–æ|–≥–∞–∑|–≤–æ–¥[–∞–∏]|–æ–ø–∞–ª–µ–Ω|–µ–ª–µ–∫—Ç—Ä–æ|—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç|—Ç–µ–ª–µ—Ñ–æ–Ω/i,
      '—Å–ø–æ—Ä—Ç': /—Å–ø–æ—Ä—Ç|—Ç—Ä–µ–Ω—É|—Ñ—ñ—Ç–Ω–µ—Å|–∞–±–æ–Ω–µ–º–µ–Ω—Ç|–∑–∞–ª|–±–∞—Å–µ–π–Ω|–π–æ–≥–∞/i,
      '–∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–∏': /–∑–æ—à–∏—Ç|—Ä—É—á–∫|–æ–ª—ñ–≤—Ü|–ø–∞–ø—ñ—Ä|–∫–∞–Ω—Ü|–∫–Ω–∏–≥|–∫–∞–Ω—Ü–µ–ª—è—Ä/i,
      '–ø–æ–∫—É–ø–∫–∏': /–æ–¥—è–≥|–≤–∑—É—Ç—Ç|—Å–æ—Ä–æ—á|–º–∞–≥–∞–∑–∏–Ω|–∫—É–ø–∏–≤|–∫—É–ø–∏–ª|–ø—Ä–∏–¥–±–∞|—à–æ–ø—ñ–Ω–≥|—à–æ–ø–ø—ñ–Ω–≥/i,
      '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': /–∞–≤—Ç–æ–±—É—Å|–º–µ—Ç—Ä–æ|—Ç–∞–∫—Å—ñ|–ø–æ—ó–∑–¥|–∫–≤–∏—Ç–æ–∫|–ø—Ä–æ—ó–∑–¥|–±–µ–Ω–∑–∏–Ω|–ø–∞–ª–∏–≤–æ/i,
      '—Ä–æ–∑–≤–∞–≥–∏': /–∫—ñ–Ω–æ|—Ç–µ–∞—Ç—Ä|–∫–æ–Ω—Ü–µ—Ä—Ç|—Ä–æ–∑–≤–∞–≥|–≤–∏—Å—Ç–∞–≤|–ø–∞—Ä–∫|–∞—Ç—Ä–∞–∫—Ü—ñ–æ–Ω/i,
      '–∑–¥–æ—Ä–æ–≤\'—è': /–ª—ñ–∫|–∞–ø—Ç–µ–∫|–º–µ–¥–∏—Ü|–ª—ñ–∫–∞—Ä|—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥|—Ç–µ—Ä–∞–ø–µ–≤—Ç|–∑–¥–æ—Ä–æ–≤/i
    };
    
    for (const [cat, pattern] of Object.entries(categoryPatterns)) {
      if (pattern.test(lowerText)) {
        category = cat;
        break;
      }
    }
    
    return { amount, category };
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –≤–∏—Ç—Ä–∞—Ç:', err);
    return { error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –≤–∏—Ç—Ä–∞—Ç' };
  }
};

/**
 * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google Sheets
 * @returns {Promise<Object>} - Google Sheets –¥–æ–∫—É–º–µ–Ω—Ç
 */
const setupGoogleSheets = async () => {
  try {
    if (!process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL || !process.env.GOOGLE_PRIVATE_KEY || !process.env.GOOGLE_SHEET_ID) {
      throw new Error('–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –¥–ª—è Google Sheets');
    }
    
    const serviceAccountAuth = new JWT({
      email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
      key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });

    const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEET_ID, serviceAccountAuth);
    await doc.loadInfo(); 
    console.log('üìä Google Sheets –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ:', doc.title);
    return doc;
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google Sheets:', err);
    throw err;
  }
};

/**
 * –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ –¥–æ Google Sheets
 * @param {string} date - –î–∞—Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏
 * @param {number} amount - –°—É–º–∞ –≤–∏—Ç—Ä–∞—Ç–∏
 * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏—Ç—Ä–∞—Ç–∏
 * @param {string} note - –û–ø–∏—Å –≤–∏—Ç—Ä–∞—Ç–∏
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
 */
const addExpenseToSheet = async (date, amount, category, note) => {
  try {
    const doc = await setupGoogleSheets();
    const sheet = doc.sheetsByIndex[0]; 
    
    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
    const formattedDateTime = new Date(date).toLocaleString('uk-UA', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

    await sheet.addRow({
      '–î–∞—Ç–∞': formattedDateTime,
      '–°—É–º–∞': amount,
      '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': category,
      '–ó–∞–ø–∏—Å': note
    });
    
    return true;
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ:', err);
    return false;
  }
};

/**
 * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param {number} amount - –°—É–º–∞ –≤–∏—Ç—Ä–∞—Ç–∏
 * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏—Ç—Ä–∞—Ç–∏
 * @param {string} note - –û–ø–∏—Å –≤–∏—Ç—Ä–∞—Ç–∏
 */
const sendExpenseConfirmation = async (ctx, amount, category, note) => {
  const noteId = Date.now().toString();
  noteStorage[noteId] = note;
  
  await ctx.reply(
    `üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É:*\n` +
    `üìù –¢–µ–∫—Å—Ç: ${note}\n` +
    `üí∞ –°—É–º–∞: ${amount} –≥—Ä–Ω\n` +
    `üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${category}`,
    {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', 
            `confirm_${amount}_${category}_${noteId}`
          ),
          Markup.button.callback('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'cancel')
        ],
        [
          Markup.button.callback('üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é', `change_category_${amount}_${noteId}`),
          Markup.button.callback('‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Å—É–º—É', `change_amount_${amount}_${category}_${noteId}`)
        ]
      ])
    }
  );
};

/**
 * –¢—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞–Ω–Ω—è –∞—É–¥—ñ–æ —á–µ—Ä–µ–∑ Whisper API
 * @param {string} filePath - –®–ª—è—Ö –¥–æ –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É
 * @returns {Promise<string>} - –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
 */
const transcribeAudio = async (filePath) => {
  try {
    console.log(`üéôÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç—É—é –∞—É–¥—ñ–æ —É WAV: ${filePath}`);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —à–ª—è—Ö –¥–æ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
    const wavPath = filePath.replace(path.extname(filePath), '.wav');

    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É WAV (16 kHz, 1 –∫–∞–Ω–∞–ª, PCM S16LE)
    await new Promise((resolve, reject) => {
      ffmpeg(filePath)
        .output(wavPath)
        .audioFrequency(16000)
        .audioChannels(1)
        .audioCodec('pcm_s16le')
        .on('end', resolve)
        .on('error', reject)
        .run();
    });

    console.log(`üìù –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∞—É–¥—ñ–æ –Ω–∞ Whisper API`);
    const fileStream = fs.createReadStream(wavPath);
    
    const response = await openai.audio.transcriptions.create({
      file: fileStream,
      model: "whisper-1",
      language: "uk"
    });

    console.log(`‚úÖ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: ${response.text}`);
    
    // –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É WAV
    cleanupFiles([wavPath]);
    
    return response.text || "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∞—É–¥—ñ–æ.";
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—ñ—ó –∞—É–¥—ñ–æ:', err);
    return "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∞—É–¥—ñ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.";
  }
};

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É
 * @param {string} fileId - ID —Ñ–∞–π–ª—É Telegram
 * @returns {Promise<string>} - –®–ª—è—Ö –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
 */
const downloadAudioFile = async (fileId) => {
  try {
    const fileInfo = await bot.telegram.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;
    const fileName = `${Date.now()}.ogg`;
    const filePath = path.join(TEMP_DIR, fileName);
    
    const response = await axios.get(fileUrl, { responseType: 'stream' });
    const writer = fs.createWriteStream(filePath);
    response.data.pipe(writer);
    
    return new Promise((resolve, reject) => {
      writer.on('finish', () => resolve(filePath));
      writer.on('error', reject);
    });
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ:', err);
    throw err;
  }
};

/**
 * –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
 * @param {Array<string>} filePaths - –ú–∞—Å–∏–≤ —à–ª—è—Ö—ñ–≤ –¥–æ —Ñ–∞–π–ª—ñ–≤
 */
const cleanupFiles = (filePaths) => {
  filePaths.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      try {
        fs.unlinkSync(filePath);
        console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª: ${filePath}`);
      } catch (err) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É ${filePath}:`, err);
      }
    }
  });
};

// –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.on(['voice', 'audio'], async (ctx) => {
  try {
    await ctx.reply('üéôÔ∏è –û–±—Ä–æ–±–ª—è—é –≤–∞—à–µ –∞—É–¥—ñ–æ...');
    
    const fileId = ctx.message.voice ? ctx.message.voice.file_id : ctx.message.audio.file_id;
    const filePath = await downloadAudioFile(fileId);
    
    await ctx.reply('üîÑ –†–æ–∑–ø—ñ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...');
    const transcribedText = await transcribeAudio(filePath);
    
    await ctx.reply(`üìù –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: "${transcribedText}"`);
    
    await ctx.reply('üí∞ –ê–Ω–∞–ª—ñ–∑—É—é –≤–∏—Ç—Ä–∞—Ç–∏...');
    const analysisResult = analyzeExpense(transcribedText);
    
    if (analysisResult.error) {
      await ctx.reply(`‚ùå ${analysisResult.error}`);
    } else {
      await sendExpenseConfirmation(
        ctx, 
        analysisResult.amount, 
        analysisResult.category, 
        transcribedText
      );
    }
    
    cleanupFiles([filePath]);
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', err);
    await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
  }
});

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.on('text', async (ctx) => {
  if (ctx.message.text.startsWith('/')) return; 
  
  try {
    await ctx.reply('üí∞ –ê–Ω–∞–ª—ñ–∑—É—é –≤–∏—Ç—Ä–∞—Ç–∏...');
    const analysisResult = analyzeExpense(ctx.message.text);
    
    if (analysisResult.error) {
      await ctx.reply(`‚ùå ${analysisResult.error}`);
    } else {
      await sendExpenseConfirmation(
        ctx, 
        analysisResult.amount, 
        analysisResult.category, 
        ctx.message.text
      );
    }
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', err);
    await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
  }
});

// –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏
bot.action(/confirm_(.+)_(.+)_(.+)/, async (ctx) => {
  try {
    const amount = parseFloat(ctx.match[1]);
    const category = ctx.match[2];
    const noteId = ctx.match[3];
    const note = noteStorage[noteId];
    
    if (!note) {
      await ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.');
      return;
    }
    
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    await ctx.reply('‚è≥ –ó–±–µ—Ä—ñ–≥–∞—é –¥–∞–Ω—ñ...');
    
    const currentDate = new Date().toISOString();
    const success = await addExpenseToSheet(currentDate, amount, category, note);
    
    if (success) {
      await ctx.reply('‚úÖ –î—è–∫—É—é –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞! –í–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.');
      delete noteStorage[noteId];
    } else {
      await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:', err);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏');
  }
});

// –û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
bot.action('cancel', async (ctx) => {
  try {
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    await ctx.reply('‚ùå –í–∏—Ç—Ä–∞—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ:', err);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –¥—ñ—ó');
  }
});

// –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
bot.action(/change_category_(.+)_(.+)/, async (ctx) => {
  try {
    const amount = parseFloat(ctx.match[1]);
    const noteId = ctx.match[2];
    const note = noteStorage[noteId];
    
    if (!note) {
      await ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.');
      return;
    }
    
    const buttons = [];
    for (let i = 0; i < DEFAULT_CATEGORIES.length; i += 2) {
      const row = [];
      row.push(Markup.button.callback(DEFAULT_CATEGORIES[i], `set_category_${amount}_${DEFAULT_CATEGORIES[i]}_${noteId}`));
      
      if (i + 1 < DEFAULT_CATEGORIES.length) {
        row.push(Markup.button.callback(DEFAULT_CATEGORIES[i+1], `set_category_${amount}_${DEFAULT_CATEGORIES[i+1]}_${noteId}`));
      }
      
      buttons.push(row);
    }
    
    await ctx.editMessageReplyMarkup(Markup.inlineKeyboard(buttons));
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:', err);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó');
  }
});

// –û–±—Ä–æ–±–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
bot.action(/set_category_(.+)_(.+)_(.+)/, async (ctx) => {
  try {
    const amount = parseFloat(ctx.match[1]);
    const category = ctx.match[2];
    const noteId = ctx.match[3];
    const note = noteStorage[noteId];
    
    if (!note) {
      await ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.');
      return;
    }
    
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    
    await sendExpenseConfirmation(ctx, amount, category, note);
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:', err);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó');
  }
});

// –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –∑–º—ñ–Ω—É —Å—É–º–∏
bot.action(/change_amount_(.+)_(.+)_(.+)/, async (ctx) => {
  try {
    const currentAmount = parseFloat(ctx.match[1]);
    const category = ctx.match[2];
    const noteId = ctx.match[3];
    
    if (!noteStorage[noteId]) {
      await ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.');
      return;
    }
    
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ —Å–µ—Å—ñ—ó
    ctx.session = ctx.session || {};
    ctx.session.pendingAmount = {
      category,
      noteId
    };
    
    await ctx.reply(
      `üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Å—É–º–∞: ${currentAmount} –≥—Ä–Ω\n` +
      `–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Å—É–º—É (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ):`,
      Markup.forceReply()
    );
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –Ω–∞ –∑–º—ñ–Ω—É —Å—É–º–∏:', err);
    await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—É–º–∏');
  }
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º
bot.command('start', async (ctx) => {
  await ctx.reply(
    '–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤–∏—Ç—Ä–∞—Ç. üí∞\n\n' +
    '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —Ç–µ–∫—Å—Ç –∑ –æ–ø–∏—Å–æ–º –≤–∞—à–∏—Ö –≤–∏—Ç—Ä–∞—Ç, —ñ —è –≤–∏–∑–Ω–∞—á—É —Å—É–º—É —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.\n\n' +
    '–ù–∞–ø—Ä–∏–∫–ª–∞–¥: "–ö—É–ø–∏–≤ –ø—Ä–æ–¥—É–∫—Ç–∏ –Ω–∞ 450 –≥—Ä–∏–≤–µ–Ω—å" –∞–±–æ "–ó–∞–ø–ª–∞—Ç–∏–≤ –∑–∞ –∫–æ–º—É–Ω–∞–ª—å–Ω—ñ 1200"'
  );
});

// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –¥–æ–ø–æ–º–æ–≥–∏
bot.command('help', async (ctx) => {
  await ctx.reply(
    'ü§ñ *–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:*\n\n' +
    '1. –ó–∞–ø–∏—à—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑ –æ–ø–∏—Å–æ–º –≤–∏—Ç—Ä–∞—Ç\n' +
    '2. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É—é –≤–∏—Ç—Ä–∞—Ç–∏\n' +
    '3. –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º\n' +
    '4. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∏—Ç—Ä–∞—Ç—É –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —á–∏ —Å—É–º—É\n' +
    '5. –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –¥–æ Google —Ç–∞–±–ª–∏—Ü—ñ\n\n' +
    '*–î–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:*\n' +
    DEFAULT_CATEGORIES.map(cat => `‚Ä¢ ${cat}`).join('\n'),
    { parse_mode: 'Markdown' }
  );
});

// Middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è –∑–º—ñ–Ω–∏ —Å—É–º–∏
bot.use(async (ctx, next) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞
  if (!ctx.message || !ctx.message.text || ctx.message.from.is_bot) {
    return next();
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç –ø—Ä–æ –∑–º—ñ–Ω—É —Å—É–º–∏
  if (ctx.session && ctx.session.pendingAmount) {
    const { category, noteId } = ctx.session.pendingAmount;
    const note = noteStorage[noteId];
    
    if (!note) {
      await ctx.reply('‚ùå –°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å. –°–ø—Ä–æ–±—É–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É.');
      delete ctx.session.pendingAmount;
      return next();
    }
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–æ—ó —Å—É–º–∏
    const newAmount = parseFloat(ctx.message.text.replace(',', '.'));
    if (isNaN(newAmount) || newAmount <= 0) {
      await ctx.reply('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (–ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ)');
      return;
    }
    
    // –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å–µ—Å—ñ—ó
    delete ctx.session.pendingAmount;
    
    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑ –Ω–æ–≤–æ—é —Å—É–º–æ—é
    await sendExpenseConfirmation(ctx, newAmount, category, note);
    return;
  }
  
  return next();
});

// Endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –±–æ—Ç–∞
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    service: 'expense-tracker-bot',
    version: '1.0.0'
  });
});

// Endpoint –¥–ª—è –≤–µ–±—Ö—É–∫—É
app.post('/webhook', (req, res) => {
  bot.handleUpdate(req.body, res);
});

// –§—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
const startBot = async () => {
  try {
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤–µ–±—Ö—É–∫—É
    await bot.telegram.deleteWebhook();
    
    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ –≤–µ–±—Ö—É–∫—É –∞–±–æ polling
    if (process.env.USE_WEBHOOK && process.env.WEBHOOK_DOMAIN) {
      await bot.launch({
        webhook: {
          domain: process.env.WEBHOOK_DOMAIN,
          path: '/webhook'
        }
      });
      console.log('ü§ñ Telegram –±–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∂–∏–º—ñ webhook');
    } else {
      await bot.launch();
      console.log('ü§ñ Telegram –±–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∂–∏–º—ñ polling');
    }
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:', err);
  }
};
bot.start(async (ctx) => {
  await ctx.reply(
    `üëã –ü—Ä–∏–≤—ñ—Ç, ${ctx.message.from.first_name}!\n
–Ø ‚Äî —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ —É –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç. –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç –∞–±–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ–∫—É–ø–∫–æ—é, –∞ —è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—é –≤–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ –¥–æ–ø–æ–º–æ–∂—É —ó—Ö –∑–∞–ø–∏—Å–∞—Ç–∏ —É Google –¢–∞–±–ª–∏—Ü—é.  
      
üìå –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å:  
- –ù–∞–¥—ñ—à–ª–∏ **—Ç–µ–∫—Å—Ç** –∞–±–æ **–≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è** –ø—Ä–æ –ø–æ–∫—É–ø–∫—É.  
- –Ø —Ä–æ–∑–ø—ñ–∑–Ω–∞—é —Å—É–º—É —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç–∏.  
- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–ø–∏—Å ‚Äî —ñ —è –∑–±–µ—Ä–µ–∂—É –π–æ–≥–æ –≤ Google Sheets.  
      
üöÄ –ì–æ—Ç–æ–≤–∏–π —Ä–æ–∑–ø–æ—á–∞—Ç–∏? –ù–∞–¥—ñ—à–ª–∏ —Å–≤–æ—é –ø–µ—Ä—à—É –ø–æ–∫—É–ø–∫—É!`
  );
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
startBot();

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
process.once('SIGINT', () => {
  bot.stop('SIGINT');
  console.log('üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ');
});

process.once('SIGTERM', () => {
  bot.stop('SIGTERM');
  console.log('üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ');
});